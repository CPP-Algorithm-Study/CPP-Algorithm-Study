// Array 

// 세 개의 숫자의 합이 0이 되는 모든 조합 찾기
// 1. 배열정렬 - 오름차순 (중복 건너뛰고 포인터 움직이기 쉽도록)
// 2. 배열순회 - 배열의 각 요소에 대해 해당요소를 삼중 항의 첫번째 요소로 사용하여 삼중항 형성할 수 있는지 확인
// 3. two pointer - 두 포인터를 서로에게로 움직여 0의 합을 이루는 것 찾기 
// 4. 중복피하기 - 결과에 중복된 삼중항이 포함되지 않도록 같은요소를 건너뜀 

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;

        // sort array
        sort(nums.begin(),nums.end());

        // loop array
        for(int i=0;i<nums.size();i++)
        {
            // skip duplicate element
            if(i>0 && nums[i] == nums[i-1]) 
            {
                continue;
            }

            int left = i+1;
            int right = nums.size()-1;

            // two pointers to find the other two elements
            while(left < right)
            {
                int sum = nums[i] + nums[left] + nums[right];

                if(sum < 0) // sum less than zero
                {
                    left++; 
                }
                else if(sum > 0) // some more than zero 
                {
                    right--;
                }
                else // find 
                {
                    result.push_back({nums[i],nums[left],nums[right]});
                    
                    // skip duplicates
                    while(left<right && nums[left]==nums[left+1])
                    {
                        left++;
                    }
                    while(left<right && nums[right]==nums[right-1])
                    {
                        right--;
                    }

                    // move both pointers after handling duplicate
                    left++;
                    right--;
                }
            }
        }

        return result;
    }

};
