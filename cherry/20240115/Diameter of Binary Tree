/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 // Binary Tree 

class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter = 0;
        depth(root,diameter);
        return diameter;
    }

private:
    int depth(TreeNode* node, int& diameter)
    {
        // base case : null 노드의 깊이는 0
        if(!node) 
        {
            return 0; 
        }

        int leftDepth = depth(node->left,diameter); // 왼쪽 서브트리 깊이
        int rightDepth = depth(node->right,diameter); // 오른쪽 서브트리 깊이 
        diameter = max(diameter,leftDepth+rightDepth); // 최대 지름 업데이트 
        return max(leftDepth, rightDepth) + 1; // 노드 깊이 반환 
        
    }

};
