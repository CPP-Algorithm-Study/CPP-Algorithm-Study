// Graph
#include <climits> // INT_MAX 를 사용하기 위한 헤더 

class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int m = mat.size(); // 행 
        int n = mat[0].size(); // 열 

        vector<vector<int>> distances(m, vector<int>(n,INT_MAX)); // 거리를 저장할 2D 벡터
        queue<pair<int,int>> q; // BFS 를 위한 큐 

        // 모든 0의 위치를 큐에 추가하고, 그 거리를 0으로 설정 
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++)
            {
                if(mat[i][j] == 0)
                {
                    q.push({i,j});
                    distances[i][j] = 0;
                }
            }
        }

        // BFS 를 사용하여 각 셀로부터 가장 가까운 0까지의 거리를 계산 
        vector<pair<int,int>> directions = {{-1,0},{1,0},{0,-1},{0,1}}; // 이동가능한 방향
        while(!q.empty())
        {
            pair<int,int> cell = q.front();
            q.pop();

            for(pair<int,int> dir : directions)
            {
                int r = cell.first + dir.first;
                int c = cell.second + dir.second;

                // 새 위치가 유효하고 아직 방문하지 않았다면
                if(r>=0 && r<m && c>=0 && c<n && distances[r][c] == INT_MAX)
                {
                    distances[r][c] = distances[cell.first][cell.second] + 1;
                    q.push({r,c}); // 새 셀을 큐에 추가 
                }
            }
        }

        return distances; // 계산된 거리를 포함하는 2D 벡터 반환 
    }
};
