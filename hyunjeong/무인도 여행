#include <string>
#include <vector>
#include <queue>
#include<algorithm>

using namespace std;

int dx[] = {-1,0,1,0};
int dy[] = {0,-1,0,1};


void bfs(vector<string> &maps,vector<int> &answer, int x, int y, int totalx, int totaly) {
    int result = 0;

    queue<pair<int,int>> q;
    
    q.push(make_pair(x,y));
    
    while(!q.empty()) {
        pair<int,int> chk = q.front();
        q.pop();
        if(maps[chk.first][chk.second] != 'X') {
            result += maps[chk.first][chk.second] -'0';
            maps[chk.first][chk.second] = 'X';
            for(int i=0;i<= 3;i++) {
                int nowx = chk.first + dx[i];
                int nowy = chk.second + dy[i];
                if(nowx >= maps.size() || nowx <0 || nowy<0 || nowy>=maps[0].size()) {
                continue; 
                }
                if(maps[nowx][nowy] != 'X') {
                        q.push(make_pair(nowx,nowy));    
                } 
            }
        }
    }

    answer.push_back(result);
    
}

vector<int> solution(vector<string> maps) {
    vector<int> answer;
    int totalx = maps.size();
    int totaly = maps[0].length();
    
    
    for(int i=0;i<maps.size();i++) {
        for(int j=0;j<maps[0].length();j++) {
            if(maps[i][j] != 'X') {
                bfs(maps,answer,i,j,totalx,totaly);   
            }
        }
    }
    
    if(answer.size()>0) {
        sort(answer.begin(),answer.end());
    }else {
        answer.push_back(-1);
    }
    return answer;
}
