#include <string>
#include <vector>
#include <algorithm>
#include <tuple>
#include <iostream>

using namespace std;

//순서대로 사용해야하니 곡괭이 수만큼 끊어주기
void settingvector(vector<tuple<int,int,int>> &v, vector<string> &minerals,int pickssum) {
    
    int fornum=0;
    if(pickssum*5>=minerals.size()) {
        fornum = minerals.size()/5;
    }else{
        fornum = pickssum-1;
    }
    
    
    int i=0;
    while(i<=fornum) {
        int dia=0;
        int iron=0;
        int stone=0;
        for(int j=0;j<=4;j++) {
            if(i*5+j<minerals.size()) {
            if(minerals[i*5+j]=="diamond") {
                dia++;
            }else if(minerals[i*5+j]=="iron") {
                iron++;
            }else if(minerals[i*5+j]=="stone") {
                stone++;
            }
            }else {
                break;
            }
        }
        v.push_back(make_tuple(dia,iron,stone));
        i++;
    }
}

//비교함수
//다이아몬드부터 비교하고 철을 비교한다.
//다이아몬드 많은거가 우선순위가 제일 높고 다음은 철
bool cmp(tuple<int,int,int> &v1,tuple<int,int,int> &v2) {
    if(get<0>(v1) > get<0>(v2)) {
        return get<0>(v1) > get<0>(v2);
    }else if(get<0>(v1) == get<0>(v2)) {
        return get<1>(v1) > get<1>(v2);
    }else {
        return get<0>(v1) > get<0>(v2);
    }  
}


int solution(vector<int> picks, vector<string> minerals) {
    int answer = 0;
    vector<tuple<int,int,int>> v;
    
    int pickssum = picks[0] +picks[1]+picks[2];
    settingvector(v,minerals,pickssum);
    sort(v.begin(),v.end(),cmp);
    
    int i=0;
    while(i<v.size()){
        if(picks[0]==0 && picks[1]==0 && picks[2]==0 )
        {
            break;
        }
        if(picks[0] >0) {
            picks[0]--;
            answer += get<0>(v[i]);
            answer += get<1>(v[i]);
            answer += get<2>(v[i]);
        }else if(picks[1] >0) {
            answer += get<0>(v[i]) * 5;
            answer += get<1>(v[i]);
            answer += get<2>(v[i]);
            picks[1]--;
        }else if(picks[2] >0 ){
            answer += get<0>(v[i]) * 25;
            answer += get<1>(v[i]) * 5;
            answer += get<2>(v[i]);
            picks[2]--;
        }
        i++;
    }
    for(int i=0;i<v.size();i++) {
          
    }
    
    return answer;
}
